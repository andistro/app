#!/data/data/com.termux/files/usr/bin/bash
#rm -rf * && rm -rf "$PREFIX/bin/andistro_files/" && rm -rf "$PREFIX/bin/andistro"
#extralink="https://raw.githubusercontent.com/andistro/app/main" # Para a versão main

if [ ! -d "$PREFIX/bin/andistro_files/" ];then
	mkdir -p "$PREFIX/bin/andistro_files/"
    mkdir -p "$PREFIX/bin/andistro_files/downloads/"
    mkdir -p "$PREFIX/bin/andistro_files/boot/"
fi

system_icu_locale_code=$(getprop persist.sys.locale)

if [ ! -d "$HOME/storage" ];then
    termux-setup-storage
fi

# Log de erros
if [ ! -d "$HOME/storage/shared/termux/andistro/logs" ];then
    mkdir "$HOME/storage/shared/termux/"
    mkdir "$HOME/storage/shared/termux/andistro"
    mkdir "$HOME/storage/shared/termux/andistro/logs"
fi

clear

# ==============================================================================================
# GLOBAL
# ==============================================================================================
# Variável com o link do script no GitHub
# Função para atualizar a barra de progresso
# update_progress() precisa ser definido antes de ser usado
update_progress() {
    local current_step=$1
    local total_steps=$2
    local percent=$((current_step * 100 / total_steps))
    local bar_length=30
    local filled_length=$((percent * bar_length / 100))
    local empty_length=$((bar_length - filled_length))

    local filled_bar
    local empty_bar
    filled_bar=$(printf "%${filled_length}s" | tr " " "=")
    empty_bar=$(printf "%${empty_length}s" | tr " " " ")

    # AQUI ESTÁ O PULO DO GATO: força a saída para o terminal
    printf "\r[%s%s] %3d%%" "$filled_bar" "$empty_bar" "$percent" > /dev/tty
}

total_steps=19  # Número total de etapas que você quer monitorar
current_step=0

{
    #1 Atualiza os repositórios
    apt update -qq -y > /dev/null 2>&1
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #2 Instala o bash
    apt install --option=Dpkg::Options::="--force-confold" bash -y > /dev/null 2>&1
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #3 Instala o openssl
    apt install --option=Dpkg::Options::="--force-confold" openssl -y > /dev/null 2>&1
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #4 Atualiza os pacotes
    apt upgrade -y > /dev/null 2>&1
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #5 Verifica se o termux-exec está instalado
    if ! dpkg -l | grep -qw termux-exec; then
        apt install termux-exec -y > /dev/null 2>&1
    fi
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #6 Verifica se o proot está instalado
    if ! dpkg -l | grep -qw proot; then
        apt install proot -y > /dev/null 2>&1
    fi
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #7 Verifica se o wget está instalado
    if ! dpkg -l | grep -qw wget; then
        apt install wget -y > /dev/null 2>&1
    fi
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #8 Verifica se o dialog está instalado
    if ! dpkg -l | grep -qw dialog; then
        apt install dialog -y > /dev/null 2>&1
    fi
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #9 Verifica se o tar está instalado
    if ! dpkg -l | grep -qw tar; then
        apt install tar -y > /dev/null 2>&1
    fi
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #10 Verifica se o curl está instalado
    if ! dpkg -l | grep -qw curl; then
        apt install curl -y > /dev/null 2>&1
    fi
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #11 Verifica se o unzip está instalado
    if ! dpkg -l | grep -qw unzip; then
        apt install unzip -y > /dev/null 2>&1
    fi
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #12 Verifica se o xz-utils está instalado
    if ! dpkg -l | grep -qw xz-utils; then
        apt install xz-utils -y > /dev/null 2>&1
    fi
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #13 Verifica se o debootstrap está instalado
    if ! dpkg -l | grep -qw debootstrap; then
        apt install debootstrap -y > /dev/null 2>&1
    fi
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #14 Verifica se o curl está instalado
    if ! dpkg -l | grep -qw dbus; then
        apt install dbus -y > /dev/null 2>&1
    fi
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #15 Verifica se o curl está instalado
    if ! dpkg -l | grep -qw pv; then
        apt install pv -y > /dev/null 2>&1
    fi
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #16 Baixa os códigos
    curl -L -o "$PREFIX/bin/andistro_files/downloads/andistro_installer.zip" "https://github.com/andistro/app/archive/refs/tags/andistro_installer.zip" > /dev/null 2>&1
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #17 Extrai o pacote
    unzip -o "$PREFIX/bin/andistro_files/downloads/andistro_installer.zip" -d "$PREFIX/bin/andistro_files/downloads" > /dev/null 2>&1
    find "$PREFIX/bin/andistro_files" -type f -exec chmod +x {} \;
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #18 copia os pacotes e aplica o chmod +x
    cp -r "$PREFIX/bin/andistro_files/downloads/app-andistro_installer/config" "$PREFIX/bin/andistro_files/setup"
    cp -r "$PREFIX/bin/andistro_files/downloads/app-andistro_installer/distros" "$PREFIX/bin/andistro_files/setup"
    cp "$HOME/andistro" "$PREFIX/bin"
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    #19 Adicionando uma nova opção no teclado do Termux
    # extra-keys = [['ESC','/','-','HOME','UP','END','PGUP'], \
    #               ['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN']]
    sed -i "s|^# *extra-keys = \[\['ESC','/','-','HOME','UP','END','PGUP'\], \\\\|extra-keys = [['ESC','/','-','HOME','UP','END','PGUP','KEYBOARD'],['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN']]|" ~/.termux/termux.properties
    sed -i "s|^#[[:space:]]*\['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN']]||" ~/.termux/termux.properties
    termux-reload-settings
    touch "$HOME/.termux_properties_done"
    echo -e "#!/bin/bash\nandistro\n.bash_profile" > "$HOME/.bash_profile" 
    ((current_step++))
    update_progress "$current_step" "$total_steps"; sleep 0.1

    echo  # pular linha no fim
}


source "$PREFIX/bin/andistro_files/setup/config/global_var_fun.sh"

if [ -f "$HOME/.termux_properties_done" ]; then
    {
        for i in {1..100}; do
            sleep 0.1
            echo $((i * 2))
        done
    } | dialog --gauge "Será necessário reiniciar o aplicativo. \nEm alguns instantes será fechado de forma automática. Inicie o Termux assim que fechar." 10 60 0

    rm -f "$HOME/.termux_properties_done"
    exit
fi

clear
#=============================================================================================
# COMANDOS
#=============================================================================================

# Verifica os argumentos passados ao script
if [ -z "$1" ]; then
    # Caso nenhum argumento seja passado, exibe a mensagem de instrução
    echo "$distro_desc_line_1"
    echo ""
    echo "$distro_desc_line_2"
    echo "$distro_desc_line_3"
    echo " "
    echo "$distro_desc_line_4"
    echo "$distro_desc_line_5"
    echo " "
    echo "$distro_desc_line_6"
    echo "$distro_desc_line_7"
    echo " "
    echo "$distro_desc_line_8"
    echo "$distro_desc_line_9"
    echo "$distro_desc_line_10"
    echo "$distro_desc_line_11"
    echo "$distro_desc_line_12"
    echo " "
    echo "$distro_desc_line_13"
    echo "   debian"
    echo "   ubuntu"
exit 0

fi

case "$1" in
    ${distro_update})
        if [ -z "$2" ]; then
            update_progress() {
                local current_step=$1
                local total_steps=$2
                local percent=$((current_step * 100 / total_steps))
                local bar_length=30
                local filled_length=$((percent * bar_length / 100))
                local empty_length=$((bar_length - filled_length))

                local filled_bar
                local empty_bar
                filled_bar=$(printf "%${filled_length}s" | tr " " "=")
                empty_bar=$(printf "%${empty_length}s" | tr " " " ")

                # AQUI ESTÁ O PULO DO GATO: força a saída para o terminal
                printf "\r[%s%s] %3d%%" "$filled_bar" "$empty_bar" "$percent" > /dev/tty
            }
            total_steps=6  # Número total de etapas que você quer monitorar
            current_step=0
            {
                # 1 Atualiza os repositórios
                apt update -qq -y > /dev/null 2>&1
                ((current_step++))
                update_progress "$current_step" "$total_steps" "Atualizando repositórios"
                sleep 0.5

                #2 atualiza os pacotes
                apt upgrade -y > /dev/null 2>&1
                ((current_step++))
                update_progress "$current_step" "$total_steps" "Atualizando repositórios"
                sleep 0.5

                #3 procura e instala o unzip
                if ! dpkg -l | grep -qw unzip; then
                    apt install unzip -y
                fi
                ((current_step++))
                update_progress "$current_step" "$total_steps"; sleep 0.1

                #4 Remmove os códigos desatualizados e baixa novos códigos
                rm -rf "$PREFIX/bin/andistro_files/downloads/andistro_installer.zip"
                curl -L -o "$PREFIX/bin/andistro_files/downloads/andistro_installer.zip" "https://github.com/andistro/app/archive/refs/tags/andistro_installer.zip"
                ((current_step++))
                update_progress "$current_step" "$total_steps"; sleep 0.1

                #5 Extrai o pacote
                unzip -o "$PREFIX/bin/andistro_files/downloads/andistro_installer.zip" -d "$PREFIX/bin/andistro_files/downloads"
                ((current_step++))
                update_progress "$current_step" "$total_steps"; sleep 0.1

                #6 copia os pacotes e aplica o chmod +x
                rm -rf "$PREFIX/bin/andistro_files/setup/config"
                rm -rf "$PREFIX/bin/andistro_files/setup/distros"
                cp -r "$PREFIX/bin/andistro_files/downloads/app-andistro_installer/config" "$PREFIX/bin/andistro_files/setup/"
                cp -r "$PREFIX/bin/andistro_files/downloads/app-andistro_installer/distros" "$PREFIX/bin/andistro_files/setup/"
                find "$PREFIX/bin/andistro_files/setup" -type f -exec chmod +x {} \;
                ((current_step++))
                update_progress "$current_step" "$total_steps"; sleep 0.1
                echo  # pular linha no fim
            }

            source "$PREFIX/bin/andistro_files/setup/config/global_var_fun.sh"
            andistro
            exit 1

        fi
        ;;

    ${distro_install})
        if [ -z "$2" ]; then
            echo "$distro_desc_line_1"
            echo ""
            echo "$distro_desc_line_2"
            echo "$distro_desc_line_3"
            echo " "
            echo "$distro_desc_line_8"
            echo "$distro_desc_line_10"
            echo " "
            echo "$distro_desc_line_13"
            echo "   debian"
            echo "   ubuntu"
            exit 1
        fi

        if [ "$2" == "debian" ]; then
            echo "$distro_wait"
            andistro ${distro_update} 2>&1
            andistro alerta
            bash "$PREFIX/bin/andistro_files/setup/distros/debian.sh"
            clear

        elif [ "$2" == "ubuntu" ]; then
            echo "$distro_wait"
            andistro ${distro_update} 2>&1
            andistro alerta
            bash "$PREFIX/bin/andistro_files/setup/distros/ubuntu.sh"
            clear

        else
            echo "Distribuição não reconhecida: $2"
            exit 1
        fi
        ;;
    ${distro_del})
        if [ -z "$2" ]; then
            echo "$distro_desc_line_1"
            echo ""
            echo "$distro_desc_line_4"
            echo "$distro_desc_line_5"
            echo " "
            echo "$distro_desc_line_8"
            echo "$distro_desc_line_11"
            echo " "
            echo "$distro_desc_line_13"
            echo "   debian"
            echo "   ubuntu"
            exit 1
        fi

        if [ "$2" == "debian" ]; then
            echo "$distro_wait"
            andistro ${distro_update} 2>&1
            rm -rf $HOME/debian-stable
            rm -rf $HOME/debian-binds
            rm -rf $HOME/start-debian.sh
            rm -rf $HOME/start-distro.sh
            rm -rf $HOME/l10n*.sh
            rm -rf $HOME/global_var_fun.sh
            rm -rf $HOME/storage
            rm -rf $HOME/debian-stable
            rm -rf $HOME/debian-bookworm
            rm -rf $HOME/debian-bullseye
            rm -rf $PREFIX/bin/start-debian
            rm -rf /data/data/com.termux/files/usr/var/run/dbus/pid 
            rm -rf system_bus_socket
            echo "Desinstalação concluída!"
            clear

        elif [ "$2" == "ubuntu" ]; then
            echo "$distro_wait"
            andistro ${distro_update} 2>&1
            rm -rf $HOME/ubuntu-noble
            rm -rf $HOME/ubuntu-noble.tar.xz
            rm -rf $HOME/ubuntu-fs
            rm -rf $HOME/ubuntu-binds
            rm -rf $HOME/start-ubuntu.sh
            rm -rf $PREFIX/bin/andistro_files/start-ubuntu
            rm -rf $HOME/start-distro.sh
            rm -rf $HOME/l10n*.sh
            rm -rf $HOME/global_var_fun.sh
            rm -rf $PREFIX/bin/start-ubuntu
            rm -rf /data/data/com.termux/files/usr/var/run/dbus/pid 
            rm -rf system_bus_socket
            echo "Desinstalação concluída!"
            clear

        else
            echo "Distribuição não reconhecida: $2"
            exit 1
        fi
        ;;
    ${distro_start})
        if [ -z "$2" ]; then
            echo "$distro_desc_line_1"
            echo ""
            echo "$distro_desc_line_6"
            echo "$distro_desc_line_7"
            echo " "
            echo "$distro_desc_line_8"
            echo "$distro_desc_line_12"
            echo " "
            echo "$distro_desc_line_13"
            echo "   debian"
            echo "   ubuntu"
            exit 1
        fi

        if [ "$2" == "debian" ]; then
            echo "$distro_wait"
            start-debian
            clear

        elif [ "$2" == "ubuntu" ]; then
            echo "$distro_wait"
            start-ubuntu
            clear

        else
            echo "Distribuição não reconhecida: $2"
            exit 1
        fi
        ;;

        alerta)
            {
                for i in {1..50}; do
                    sleep 0.1
                    echo $((i * 2))
                done
            } | dialog --gauge "${label_distro_alert_timezone_desc} \n$label_distro_alert_timezone_detected $system_timezone\n\n$label_sleep_in_5s" 10 60 0
        ;;

    *)
        echo "$distro_command_not_found $1"
        echo ""
        echo "$distro_desc_line_1"
        echo ""
        echo "$distro_desc_line_2"
        echo "$distro_desc_line_3"
        echo " "
        echo "$distro_desc_line_4"
        echo "$distro_desc_line_5"
        echo " "
        echo "$distro_desc_line_6"
        echo "$distro_desc_line_7"
        echo " "
        echo "$distro_desc_line_8"
        echo "$distro_desc_line_9"
        echo "$distro_desc_line_10"
        echo "$distro_desc_line_11"
        echo "$distro_desc_line_12"
        echo " "
        echo "$distro_desc_line_13"
        echo "   debian"
        echo "   ubuntu"
        echo " "
        exit 1
        ;;
esac
