#!/data/data/com.termux/files/usr/bin/bash

# rm -rf * && rm -rf $PREFIX/var/lib/andistro/ && rm -rf $PREFIX/bin/andistro

# am start --user 0 -a android.settings.APPLICATION_DETAILS_SETTINGS -d "package:com.termux" este comando abre as informaçoes do termux nas configurações do Android

#extralink="https://raw.githubusercontent.com/andistro/app/main" # Para a versão main

# Log de erros
if [ ! -d "$HOME/storage/shared/termux/andistro/logs" ];then
    mkdir -p "$HOME/storage/shared/termux/"
    mkdir -p "$HOME/storage/shared/termux/andistro"
    mkdir -p "$HOME/storage/shared/termux/andistro/distros"
    mkdir -p "$HOME/storage/shared/termux/andistro/logs"
    touch "$HOME/storage/shared/termux/andistro/logs/.nomedia"
fi
andistro_files="$PREFIX/var/lib/andistro"
ANDISTRO_LOG="$HOME/storage/shared/termux/andistro/logs"
# Cria os diretórios necessários
if [ ! -d "$PREFIX/var/lib/andistro/" ];then
	mkdir -p "$PREFIX/var/lib/andistro/"
	mkdir -p "$PREFIX/var/lib/andistro/lib/share/"
	mkdir -p "$PREFIX/var/lib/andistro/lib/share/locales/"
	mkdir -p "$PREFIX/var/lib/andistro/boot/"
fi

if [ -f "$PREFIX/var/lib/andistro/lib/share/global" ]; then
    source $PREFIX/var/lib/andistro/lib/share/global
fi

# Detecta o idioma do sistema
system_icu_locale_code=$(getprop persist.sys.locale)

#Verifica se o andistro está em $HOME

# Configurações do Termux
# Verifica se a configuração já foi aplicada
# Adiciona a configuração de teclas extras se não estiver presente
if ! grep -Fq "extra-keys = [['DRAWER','PASTE'],['ESC','/','-','HOME','UP','END','PGUP','KEYBOARD'],['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN','ENTER']]" ~/.termux/termux.properties; then
    # Aplica os sed
    sed -i "s|^# *extra-keys = \[\['ESC','/','-','HOME','UP','END','PGUP'\], \\\\|extra-keys = [['DRAWER','PASTE'],['ESC','/','-','HOME','UP','END','PGUP','KEYBOARD'],['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN','ENTER']]|" ~/.termux/termux.properties
    sed -i "s|^#[[:space:]]*\['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN']]||" ~/.termux/termux.properties

    # Recarrega Termux settings
    termux-reload-settings
fi

#=============================================================================================
# COMANDOS
#=============================================================================================
if [ -z "$1" ]; then

    export USER=$(whoami)
    HEIGHT=0
    WIDTH=100
    CHOICE_HEIGHT=5
    export PORT=1

    OPTIONS=(1 "Instalar"
            2 "Iniciar"
            3 "Atualizar"
            4 "Desinstalar"
            5 "Ver como terminal")

    CHOICE=$(dialog --no-shadow --clear \
        --title "AnDistro" \
        --menu "Escolha uma das opções:" \
        $HEIGHT $WIDTH $CHOICE_HEIGHT \
        "${OPTIONS[@]}" \
        2>&1 >/dev/tty)

    case $CHOICE in
        1)	
            export PORT=1
            OPTIONS=(1 "Debian"
                    2 "Ubuntu"
                    3 "Ver como terminal")

            CHOICE=$(dialog --no-shadow --clear \
                --title "AnDistro" \
                --menu "Escolha uma das opções:" \
                $HEIGHT $WIDTH $CHOICE_HEIGHT \
                "${OPTIONS[@]}" \
                2>&1 >/dev/tty)
            case $CHOICE in
                1)
                    andistro  -i debian
                    ;;
                2)
                    andistro -i ubuntu
                    ;;
                3)
                    andistro -i
                    ;;
            esac
        ;;
        2)	
            export PORT=1
            OPTIONS=(1 "Debian"
                    2 "Ubuntu"
                    3 "Ver como terminal")

            CHOICE=$(dialog --no-shadow --clear \
                --title "AnDistro" \
                --menu "Escolha uma das opções:" \
                $HEIGHT $WIDTH $CHOICE_HEIGHT \
                "${OPTIONS[@]}" \
                2>&1 >/dev/tty)
            case $CHOICE in
                1)
                    andistro -s debian
                    ;;
                2)
                    andistro -s ubuntu
                    ;;
                3)
                    andistro -s
                    ;;
            esac
        ;;

        3)
            andistro -u
        ;;

        4)
            export PORT=1
            OPTIONS=(1 "Debian"
                    2 "Ubuntu"
                    3 "Ver como terminal")

            CHOICE=$(dialog --no-shadow --clear \
                --title "AnDistro" \
                --menu "Escolha uma das opções:" \
                $HEIGHT $WIDTH $CHOICE_HEIGHT \
                "${OPTIONS[@]}" \
                2>&1 >/dev/tty)
            case $CHOICE in
                1)
                    andistro -d debian
                    ;;
                2)
                    andistro -d ubuntu
                    ;;
                3)
                    andistro -d
                    ;;
            esac
        ;;

        5)
            andistro terminal
        ;;
    esac
exit 0
fi

case "$1" in
    -u)

        echo -e "\n$distro_wait"
        update_progress() {
            current_step=$1
            total_steps=$2

            percent=$((current_step * 100 / total_steps))
            bar_length=30
            filled_length=$((percent * bar_length / 100))
            empty_length=$((bar_length - filled_length))

            filled_bar=$(printf "%${filled_length}s" | tr " " "=")
            empty_bar=$(printf "%${empty_length}s" | tr " " " ")

            printf "\r[%s%s] %3d%%" "$filled_bar" "$empty_bar" "$percent"
        }

        total_steps=25  # Número total de etapas que você quer monitorar
        current_step=0

        {
            #1 Atualiza os repositórios
            sleep 1
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #2 Atualiza os repositórios
            pkg update > /dev/null 2>&1
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #3 Instala o bash
            pkg install --option=Dpkg::Options::="--force-confold" bash -y > /dev/null 2>&1
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #4 Instala o openssl
            pkg install --option=Dpkg::Options::="--force-confold" openssl -y > /dev/null 2>&1
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #5 Instala o apt
            pkg install --option=Dpkg::Options::="--force-confold" apt -y > /dev/null 2>&1
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #6 Atualiza os pacotes
            pkg upgrade -y > /dev/null 2>&1
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #7 Verifica se o termux-exec está instalado
            if ! dpkg -l | grep -qw termux-exec; then
                pkg install termux-exec -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #8 Verifica se o proot está instalado
            if ! dpkg -l | grep -qw proot; then
                pkg install proot -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #9 Verifica se o x11-repo está instalado
            if ! dpkg -l | grep -qw x11-repo; then
                pkg install x11-repo -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #10 Verifica se o termux-x11-nightly está instalado
            if ! dpkg -l | grep -qw termux-x11-nightly; then
                pkg install termux-x11-nightly -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #11 Verifica se o pulseaudio está instalado
            if ! dpkg -l | grep -qw pulseaudio; then
                pkg install pulseaudio -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #12 Verifica se o wget está instalado
            if ! dpkg -l | grep -qw wget; then
                pkg install wget -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #13 Verifica se o dialog está instalado
            if ! dpkg -l | grep -qw dialog; then
                pkg install dialog -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #14 Verifica se o tar está instalado
            if ! dpkg -l | grep -qw tar; then
                pkg install tar -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #15 Verifica se o curl está instalado
            if ! dpkg -l | grep -qw curl; then
                pkg install curl -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #16 Verifica se o unzip está instalado
            if ! dpkg -l | grep -qw unzip; then
                pkg install unzip -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #17 Verifica se o xz-utils está instalado
            if ! dpkg -l | grep -qw xz-utils; then
                pkg install xz-utils -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #18 Verifica se o debootstrap está instalado
            if ! dpkg -l | grep -qw debootstrap; then
                pkg install debootstrap -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #19 Verifica se o dbus está instalado
            if ! dpkg -l | grep -qw dbus; then
                pkg install dbus -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #20 Verifica se o pv está instalado
            if ! dpkg -l | grep -qw pv; then
                pkg install pv -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #21 Verifica se o git está instalado
            if ! dpkg -l | grep -qw git; then
                pkg install git -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #22 Verifica se o inxi está instalado
            if ! dpkg -l | grep -qw inxi; then
                pkg install inxi -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #23 Todo o pacote de instalação
            git clone -b alpha https://github.com/andistro/app.git app-andistro_setup  > /dev/null 2>&1
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #24 Extrai o pacote de instalação
            rm -rf $andistro_files
            rm -rf "$HOME/app-andistro_setup/.git"
            rm -rf "$HOME/app-andistro_setup/setup"
            rm -rf "$HOME/app-andistro_setup/README.md"
            rm -rf "$HOME/app-andistro_setup/termos.sh"
            mv $HOME/app-andistro_setup/andistro $PREFIX/bin/andistro 
            mv $HOME/app-andistro_setup/ $PREFIX/var/lib/andistro/
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #25 Mover o Andistro
            find $PREFIX/var/lib/andistro/lib -type f -exec chmod +x {} \; 
            find $PREFIX/var/lib/andistro/boot -type f -exec chmod +x {} \;
            find $PREFIX/var/lib/andistro/boot/.config -type f -exec chmod +x {} \;
            chmod +x "$HOME/termos.sh"
            chmod +x "$PREFIX/bin/andistro"
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            echo
        }
        rm -rf "$HOME/app-andistro_setup"
        rm -rf andistro_setup.zip
        rm -rf "$HOME/andistro_setup"
        
        chmod +x "$PREFIX/var/lib/andistro/lib/share/global"
        source "$PREFIX/var/lib/andistro/lib/share/global"
        echo -e "$label_update_finish"
        ;;

    -i)
        if [ -z "$2" ]; then
            echo "$distro_desc_line_1"
            echo ""
            echo "$distro_desc_line_2"
            echo "$distro_desc_line_3"
            echo " "
            echo "$distro_desc_line_8"
            echo "$distro_desc_line_10"
            echo " "
            echo "$distro_desc_line_13"
            echo "   debian"
            echo "   ubuntu"
            exit 1
        fi
    
        if [ "$2" == "debian" ]; then
            distro_name="debian"
            

        elif [ "$2" == "ubuntu" ]; then
            distro_name="ubuntu"
            bin="$andistro_files/boot/start-$distro_name"
            folder="$andistro_files/boot/$distro_name"
            binds="$andistro_files/boot/$distro_name/binds"
        else
            echo "Distribuição não reconhecida: $2"
            exit 1
        fi
        echo "$distro_wait"
        config_file="$andistro_files/boot/.config/$distro_name-based"
        bin="$andistro_files/boot/start-$distro_name"
        folder="$andistro_files/boot/$distro_name"
        binds="$andistro_files/boot/$distro_name/binds"
        andistro alerta timezone
        andistro alerta lang
        andistro alerta arquitetura
        mkdir -p "$PREFIX/var/lib/andistro/boot/$distro_name"
        if [ ! -d "$HOME/storage/shared/termux/andistro/boot/$distro_name/$codinome" ];then
            mkdir -p "$HOME/storage/shared/termux/"
            mkdir -p "$HOME/storage/shared/termux/andistro"
            mkdir -p "$HOME/storage/shared/termux/andistro/boot"
            mkdir -p "$HOME/storage/shared/termux/andistro/boot/$distro_name/$codinome"
        fi
        mkdir -p $binds
        bash $PREFIX/var/lib/andistro/boot/install-$distro_name.sh "$config_file" "$andistro_files" "$distro_name" "$bin" "$folder" "$binds" "$language_selected" "$language_transformed" "$archurl"
        clear
        andistro -s
        andistro -s $distro_name
        ;;
    -d)
        if [ -z "$2" ]; then
            echo "$distro_desc_line_1"
            echo ""
            echo "$distro_desc_line_4"
            echo "$distro_desc_line_5"
            echo " "
            echo "$distro_desc_line_8"
            echo "$distro_desc_line_11"
            echo " "
            echo "$distro_desc_line_13"
            echo "   debian"
            echo "   ubuntu"
            exit 1
        fi

        if [ "$2" == "total" ]; then
            # Desinstalação total
            echo "$distro_wait"
            rm -rf $PREFIX/var/lib/andistro
            rm -rf $PREFIX/bin/andistro
            rm -rf /data/data/com.termux/files/usr/var/run/dbus/pid 
            rm -rf system_bus_socket
            
        elif [ "$2" == "debian" ]; then
            echo "$distro_wait"
            rm -rf $PREFIX/var/lib/andistro/boot/debian/
            rm -rf $PREFIX/var/lib/andistro/boot/debian/*
            rm -rf $PREFIX/var/lib/andistro/boot/start-debian*
            rm -rf /data/data/com.termux/files/usr/var/run/dbus/pid 
            rm -rf system_bus_socket
            echo "Desinstalação concluída!"

        elif [ "$2" == "ubuntu" ]; then
            echo "$distro_wait"
            rm -rf $PREFIX/var/lib/andistro/boot/ubuntu/
            rm -rf $PREFIX/var/lib/andistro/boot/ubuntu/*
            rm -rf $PREFIX/var/lib/andistro/boot/start-ubuntu*
            rm -rf /data/data/com.termux/files/usr/var/run/dbus/pid 
            rm -rf system_bus_socket
            echo "Desinstalação concluída!"

        else
            echo "Distribuição não reconhecida: $2"
            exit 1
        fi
        ;;
    -s)
        if [ -z "$2" ]; then
            echo "$distro_desc_line_1"
            echo ""
            echo "$distro_desc_line_6"
            echo "$distro_desc_line_7"
            echo " "
            echo "$distro_desc_line_8"
            echo "$distro_desc_line_12"
            echo " "
            echo "$distro_desc_line_13"
            echo "   debian"
            echo "   ubuntu"
            exit 1
        fi

        if [ "$2" == "debian" ]; then
            echo "$distro_wait"
            bash $PREFIX/var/lib/andistro/boot/start-debian

        elif [ "$2" == "ubuntu" ]; then
            echo "$distro_wait"
            bash $PREFIX/var/lib/andistro/boot/start-ubuntu

        else
            echo "Distribuição não reconhecida: $2"
            exit 1
        fi
        ;;

    terminal)
        echo "$distro_desc_line_1"
        echo ""
        echo "$distro_desc_line_2"
        echo "$distro_desc_line_3"
        echo " "
        echo "$distro_desc_line_4"
        echo "$distro_desc_line_5"
        echo " "
        echo "$distro_desc_line_6"
        echo "$distro_desc_line_7"
        echo " "
        echo "$distro_desc_line_8"
        echo "$distro_desc_line_9"
        echo "$distro_desc_line_10"
        echo "$distro_desc_line_11"
        echo "$distro_desc_line_12"
        echo " "
        echo "$distro_desc_line_13"
        echo "   debian"
        echo "   ubuntu"
        ;;

    alerta)
        if [ -z "$2" ]; then
            # Não foi passado subcomando, comportamento padrão
            echo "Não foi especificado o subcomando para alerta"
        else
            case "$2" in
                timezone)
                    {
                        for i in {1..50}; do
                            sleep 0.1
                            echo $((i * 2))
                        done
                    } | dialog --no-shadow --gauge "${label_distro_alert_timezone_desc} \n$label_distro_alert_timezone_detected $system_timezone\n\n$label_sleep_in_5s" 10 60 0
                    ;;
                lang)
                   # Verificar se o idioma do sistema está no mapa, senão usar en-US
                    if [[ -n "${LANG_CODES[$system_icu_locale_code]}" ]]; then
                        system_lang_code="$system_icu_locale_code"
                    else
                        system_lang_code="en-US"
                    fi

                    # Montar opções do menu
                    OPTIONS=()
                    OPTIONS+=("auto" "→ ${LANG_CODES[$system_lang_code]} $label_detected")
                    OPTIONS+=("SEP" "────────────")  # Separador visual seguro

                    # Adicionar os demais idiomas em ordem alfabética (exceto o detectado)
                    for code in $(printf "%s\n" "${!LANG_CODES[@]}" | sort); do
                        [[ "$code" == "$system_lang_code" ]] && continue
                        OPTIONS+=("$code" "${LANG_CODES[$code]}")
                    done

                    # Tamanho da janela do dialog
                    HEIGHT=0
                    WIDTH=100
                    CHOICE_HEIGHT=10

                    # Mostrar menu com redirecionamento seguro
                    exec 3>&1
                    CHOICE=$(dialog --no-shadow --clear \
                        --title "$MENU_language_select" \
                        --menu "$MENU_language_select" \
                        $HEIGHT $WIDTH $CHOICE_HEIGHT \
                        "${OPTIONS[@]}" \
                        2>&1 1>&3)
                    exec 3>&-


                    # Determinar idioma selecionado
                    if [[ "$CHOICE" == "auto" || -z "$CHOICE" ]]; then
                        language_selected="$system_lang_code"
                    elif [[ "$CHOICE" == "SEP" ]]; then
                        exit 0  # ignorar separador
                    else
                        language_selected="$CHOICE"
                    fi

                    # Converter de pt-BR para pt_BR
                    language_transformed="${language_selected//-/_}"

                    # Exportar, se necessário
                    export language_selected
                    export language_transformed
                    ;;
                arquitetura)
                    case `dpkg --print-architecture` in
                    aarch64)
                        export archurl="arm64" ;;
                    arm)
                        export archurl="armhf" ;;
                    *)
                        echo "unknown architecture"; exit 1 ;;
                    esac
                    ;;

                *)
                    echo "Subcomando desconhecido: $2"
                    ;;
            esac
        fi


        
        ;;
    --setup)
        # Comando interno para iniciar a edição direta do código
        if [ -z "$2" ]; then
            # Não foi passado subcomando, comportamento padrão
            echo "Não foi especificado o subcomando para --setup"
        else
            case "$2" in
                storage)
                    if [ -d "$HOME/storage/shared" ]; then
                        if ls "$HOME/storage/shared" &>/dev/null; then
                            # Acesso ao armazenamento OK!
                            echo "Acesso ao armazenamento."
                        else
                            # A pasta existe, mas sem permissão de acesso.
                            dialog --no-shadow --title "Permissão necessária" --ok-label "Permitir" \
                        --msgbox "Sem permissão de acesso." 8 50
                        rm -rf storage
                        termux-setup-storage
                        fi
                    else
                        termux-setup-storage
                    fi
                    ;;
                battery)
                    dialog --no-shadow --title "Permissão necessária" --ok-label "Permitir" \
                        --msgbox "Após clicar em permitir, procure pelo Termux na lista de aplicativos, clique e escolha a opção não restrito." 8 50
                    am start -a android.settings.IGNORE_BATTERY_OPTIMIZATION_SETTINGS
                    ;;
                termux-details-settings)
                    dialog --no-shadow --title "Informação" \
                        --msgbox "Após clicar em \"Ok\" será aberto a as informações do Termux no sistema." 8 50
                    am start -a android.settings.APPLICATION_DETAILS_SETTINGS -d "package:com.termux"
                    ;;
 
                *)
                    echo "Subcomando desconhecido: $2"
                    ;;
            esac
        fi
        ;;
    --set-edit)
        # Comando interno para iniciar a edição direta do código
        if [ -z "$2" ]; then
            # Não foi passado subcomando, comportamento padrão
            nano "$PREFIX/bin/andistro"
        else
            case "$2" in
                debian)
                    nano "$PREFIX/var/lib/andistro/boot/install-debian.sh"
                    ;;
                start-debian)
                    nano "$PREFIX/var/lib/andistro/boot/start-debian"
                    ;;
                ubuntu)
                    nano "$PREFIX/var/lib/andistro/boot/install-ubuntu"
                    ;;
                start-ubuntu)
                    nano "$PREFIX/var/lib/andistro/boot/start-ubuntu.sh"
                    ;;
                module-global)
                    nano "$PREFIX/var/lib/andistro/lib/share/global"
                    ;;
                module-locale)
                    nano "$PREFIX/var/lib/andistro/lib/share/locales_${system_icu_locale_code}.sh"
                    ;;
                *)
                    echo "Subcomando desconhecido: $2"
                    ;;
            esac
        fi
        ;;

    *)
        echo "$distro_command_not_found $1"
        andistro terminal
        exit 1
        ;;
esac