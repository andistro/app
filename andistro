#!/data/data/com.termux/files/usr/bin/bash
#rm -rf * && rm -rf "$PREFIX/bin/andistro_files/" && rm -rf "$PREFIX/bin/andistro"
extralink="https://raw.githubusercontent.com/andistro/app/main" # Para a versão main
source "$PREFIX/bin/andistro_files/global_var_fun.sh"
if [ ! -d "$PREFIX/bin/andistro_files/" ];then
	mkdir -p "$PREFIX/bin/andistro_files/"
fi

system_icu_locale_code=$(getprop persist.sys.locale)

if [ ! -d "$HOME/storage" ];then
    termux-setup-storage
fi
# Log de erros
if [ ! -d "$HOME/storage/shared/termux/andistro/logs" ];then
    mkdir "$HOME/storage/shared/termux/"
    mkdir "$HOME/storage/shared/termux/andistro"
    mkdir "$HOME/storage/shared/termux/andistro/logs"
fi

clear

#Verifica se o andistro está em $HOME
if [ -f "$HOME/andistro" ]; then
    mv "$HOME/andistro" "$PREFIX/bin/andistro"
    rm -rf "$HOME/andistro"
fi

# ==============================================================================================
# GLOBAL
# ==============================================================================================
# Variável com o link do script no GitHub
# Função para atualizar a barra de progresso
# update_progress() precisa ser definido antes de ser usado

if ! grep -Fq "extra-keys = [['DRAWER','SCROLL','PASTE'],['ESC','/','-','HOME','UP','END','PGUP','KEYBOARD'],['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN','ENTER']]" ~/.termux/termux.properties; then
    # Aplica os sed
    sed -i "s|^# *extra-keys = \[\['ESC','/','-','HOME','UP','END','PGUP'\], \\\\|extra-keys = [['DRAWER','SCROLL','PASTE'],['ESC','/','-','HOME','UP','END','PGUP','KEYBOARD'],['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN','ENTER']]|" ~/.termux/termux.properties
    sed -i "s|^#[[:space:]]*\['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN']]||" ~/.termux/termux.properties

    # Recarrega Termux settings
    termux-reload-settings
fi


#=============================================================================================
# COMANDOS
#=============================================================================================
if [ -z "$1" ]; then

# Função para capitalizar a primeira letra
capitalize() {
    echo "$1" | sed -e "s/^\(.\)/\U\1/"
}

# Função para listar distros para iniciar (baseado nos arquivos start-*)
list_start_distros() {
    local files=("$PREFIX/bin/andistro_files"/start-*)
    local distros=()

    for f in "${files[@]}"; do
        if [[ -f "$f" ]]; then
            local name="${f##*/start-}"
            distros+=("$name")
        fi
    done

    # Ordena alfabeticamente e imprime com número e nome capitalizado
    IFS=$'\n' sorted=($(sort <<<"${distros[*]}"))
    unset IFS

    local i=1
    for d in "${sorted[@]}"; do
        echo "$i" "$(capitalize "$d")"
        ((i++))
    done
}

# Função para listar distros instaladas para desinstalar (diretórios distro-nomeversao no $HOME)
list_installed_distros() {
    local dirs=("$HOME"/debian-*)
    local distros=()

    for d in "${dirs[@]}"; do
        if [[ -d "$d" ]]; then
            # Pega só o nome da pasta
            local name="${d##*/}"
            distros+=("$name")
        fi
    done

    # Ordena alfabeticamente e imprime com número e nome capitalizado
    IFS=$'\n' sorted=($(sort <<<"${distros[*]}"))
    unset IFS

    local i=1
    for d in "${sorted[@]}"; do
        echo "$i" "$(capitalize "$d")"
        ((i++))
    done
}

# Checa existência de arquivos start-*
has_start_files() {
    shopt -s nullglob
    local files=("$PREFIX/bin/andistro_files"/start-*)
    [[ ${#files[@]} -gt 0 ]]
}

# Checa existência de distros instaladas no $HOME
has_installed_distros() {
    shopt -s nullglob
    local dirs=("$HOME"/*-*) # identificar a distro
    [[ ${#dirs[@]} -gt 0 ]]
}

show_main_menu() {
    local menu_items=()
    local height=15
    local width=50
    local menu_height=6

    if has_start_files && has_installed_distros; then
        # Caso exista start-* e distros instaladas
        menu_items=(
            1 "Iniciar"
            2 "Instalar"
            3 "Desinstalar"
            4 "Atualizar"
            5 "Modo Terminal"
        )
        menu_height=7
    elif has_start_files && ! has_installed_distros; then
        # Existe start-* mas nenhuma distro instalada
        menu_items=(
            1 "Iniciar"
            2 "Instalar"
            3 "Atualizar"
            4 "Modo Terminal"
        )
        menu_height=6
    else
        # Nenhum start-* nem distros instaladas
        menu_items=(
            1 "Instalar"
            2 "Atualizar"
            3 "Modo Terminal"
        )
        menu_height=5
    fi

    CHOICE=$(dialog --clear \
        --title "Andistro" \
        --menu "Selecione uma opção:" "$height" "$width" "$menu_height" \
        "${menu_items[@]}" \
        3>&1 1>&2 2>&3)

    clear
    echo "$CHOICE"
}

show_start_menu() {
    local options=()
    local i=1

    while read -r line; do
        local num=$(echo "$line" | awk '{print $1}')
        local name=$(echo "$line" | cut -d' ' -f2-)
        options+=("$num" "$name")
        ((i++))
    done < <(list_start_distros)

    if [ ${#options[@]} -eq 0 ]; then
        dialog --msgbox "Nenhuma distribuição disponível para iniciar." 6 40
        return 1
    fi

    local choice=$(dialog --clear \
        --title "Iniciar Distribuição" \
        --menu "Escolha a distribuição para iniciar:" 15 50 $(( ${#options[@]} / 2 )) \
        "${options[@]}" \
        3>&1 1>&2 2>&3)

    clear
    echo "$choice"
}

show_uninstall_menu() {
    local options=()
    local i=1

    while read -r line; do
        local num=$(echo "$line" | awk '{print $1}')
        local name=$(echo "$line" | cut -d' ' -f2-)
        options+=("$num" "$name")
        ((i++))
    done < <(list_installed_distros)

    if [ ${#options[@]} -eq 0 ]; then
        dialog --msgbox "Nenhuma distribuição instalada para desinstalar." 6 40
        return 1
    fi

    local choice=$(dialog --clear \
        --title "Desinstalar Distribuição" \
        --menu "Escolha a distribuição para desinstalar:" 15 50 $(( ${#options[@]} / 2 )) \
        "${options[@]}" \
        3>&1 1>&2 2>&3)

    clear
    echo "$choice"
}

# Função para executar o start da distro selecionada
start_distro() {
    local choice=$1
    local distros=()

    while read -r line; do
        distros+=("$(echo "$line" | cut -d' ' -f2- | tr '[:upper:]' '[:lower:]')")
    done < <(list_start_distros)

    local distro_name="${distros[$((choice - 1))]}"
    if [ -n "$distro_name" ]; then
        local start_script="$PREFIX/bin/andistro_files/start-$distro_name"
        if [ -x "$start_script" ]; then
            "$start_script"
        else
            dialog --msgbox "Script para iniciar $distro_name não encontrado ou não executável." 6 50
        fi
    fi
}

# Função para desinstalar a distro selecionada
uninstall_distro() {
    local choice=$1
    local distros=()

    while read -r line; do
        distros+=("$(echo "$line" | cut -d' ' -f2- | tr '[:upper:]' '[:lower:]')")
    done < <(list_installed_distros)

    local distro_dir="${distros[$((choice - 1))]}"
    local full_path="$HOME/$distro_dir"
    if [ -d "$full_path" ]; then
        dialog --yesno "Deseja realmente desinstalar $distro_dir?" 7 50
        if [ $? -eq 0 ]; then
            rm -rf "$full_path"
            dialog --msgbox "$distro_dir desinstalado com sucesso." 6 40
        fi
    else
        dialog --msgbox "Diretório $distro_dir não encontrado." 6 40
    fi
}

main() {
    while true; do
        choice=$(show_main_menu)

        case "$choice" in
            1)
                if has_start_files; then
                    start_choice=$(show_start_menu)
                    if [ -n "$start_choice" ]; then
                        start_distro "$start_choice"
                    fi
                else
                    # Instalar
                    andistro -i
                fi
                ;;
            2)
                if has_start_files; then
                    # Instalar
                    andistro -i
                else
                    # Atualizar
                    andistro -u
                fi
                ;;
            3)
                if has_start_files && has_installed_distros; then
                    # Desinstalar
                    uninstall_choice=$(show_uninstall_menu)
                    if [ -n "$uninstall_choice" ]; then
                        uninstall_distro "$uninstall_choice"
                    fi
                else
                    # Modo Terminal
                    echo "Entrando no modo terminal..."
                    andistro terminal
                    # Aqui você pode colocar a saída que quiser para o modo terminal
                fi
                ;;
            4)
                if has_start_files && has_installed_distros; then
                    # Atualizar
                    andistro -u
                else
                    # Modo Terminal
                    echo "Entrando no modo terminal..."
                    andistro terminal
                fi
                ;;
            5)
                # Modo Terminal
                echo "Entrando no modo terminal..."
                andistro terminal
                ;;
            0)
                clear
                echo "Saindo..."
                exit 0
                ;;
            *)
                clear
                echo "Saindo..."
                exit 0
                ;;
        esac
    done
}

main
fi


case "$1" in
    -u)
        update_progress() {
            current_step=$1
            total_steps=$2

            percent=$((current_step * 100 / total_steps))
            bar_length=30
            filled_length=$((percent * bar_length / 100))
            empty_length=$((bar_length - filled_length))

            filled_bar=$(printf "%${filled_length}s" | tr " " "=")
            empty_bar=$(printf "%${empty_length}s" | tr " " " ")

            printf "\r[%s%s] %3d%%" "$filled_bar" "$empty_bar" "$percent"
        }


        total_steps=21  # Número total de etapas que você quer monitorar
        current_step=0

        {
            #1 Atualiza os repositórios
            apt update -qq -y > /dev/null 2>&1
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #2 Instala o bash
            apt install --option=Dpkg::Options::="--force-confold" bash -y > /dev/null 2>&1
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #3 Instala o openssl
            apt install --option=Dpkg::Options::="--force-confold" openssl -y > /dev/null 2>&1
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #4 Atualiza os pacotes
            apt upgrade -y > /dev/null 2>&1
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #5 Verifica se o termux-exec está instalado
            if ! dpkg -l | grep -qw termux-exec; then
                apt install termux-exec -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #6 Verifica se o proot está instalado
            if ! dpkg -l | grep -qw proot; then
                apt install proot -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #7 Verifica se o wget está instalado
            if ! dpkg -l | grep -qw wget; then
                apt install wget -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #8 Verifica se o dialog está instalado
            if ! dpkg -l | grep -qw dialog; then
                apt install dialog -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #9 Verifica se o tar está instalado
            if ! dpkg -l | grep -qw tar; then
                apt install tar -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #10 Verifica se o curl está instalado
            if ! dpkg -l | grep -qw curl; then
                apt install curl -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #11 Verifica se o unzip está instalado
            if ! dpkg -l | grep -qw unzip; then
                apt install unzip -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #12 Verifica se o xz-utils está instalado
            if ! dpkg -l | grep -qw xz-utils; then
                apt install xz-utils -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #13 Verifica se o debootstrap está instalado
            if ! dpkg -l | grep -qw debootstrap; then
                apt install debootstrap -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #14 Verifica se o dbus está instalado
            if ! dpkg -l | grep -qw dbus; then
                apt install dbus -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #15 Verifica se o pv está instalado
            if ! dpkg -l | grep -qw pv; then
                apt install pv -y > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #16 Verifica e baixa global_var_fun.sh
            if [ ! -f "$PREFIX/bin/andistro_files/global_var_fun.sh" ]; then
                curl -s -o "$PREFIX/bin/andistro_files/global_var_fun.sh" "${extralink}/config/global_var_fun.sh" > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #17 Verifica e atualiza o global_var_fun
            curl -s -o "$PREFIX/bin/andistro_files/global_var_fun.check" "${extralink}/config/global_var_fun.sh" 2>&1

            if [ -f "$PREFIX/bin/andistro_files/global_var_fun.sh" ] && [ -f "$PREFIX/bin/andistro_files/global_var_fun.check" ]; then
                if ! cmp -s "$PREFIX/bin/andistro_files/global_var_fun.sh" "$PREFIX/bin/andistro_files/global_var_fun.check"; then
                    rm "$PREFIX/bin/andistro_files/global_var_fun.sh"
                    mv "$PREFIX/bin/andistro_files/global_var_fun.check" "$PREFIX/bin/andistro_files/global_var_fun.sh"
                    chmod +x "$PREFIX/bin/andistro_files/global_var_fun.sh"
                else
                    rm "$PREFIX/bin/andistro_files/global_var_fun.check"
                fi
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #18 Verifica e baixa l10n_${locale}.sh
            if [ ! -f "$PREFIX/bin/andistro_files/l10n_${system_icu_locale_code}.sh" ]; then
                curl -s -o "$PREFIX/bin/andistro_files/l10n_${system_icu_locale_code}.sh" "${extralink}/config/locale/l10n_${system_icu_locale_code}.sh" > /dev/null 2>&1
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #19 Verifica e atualiza o l10n_${locale}.sh
            curl -s -o "$PREFIX/bin/andistro_files/l10n_${system_icu_locale_code}.check" "${extralink}/config/locale/l10n_${system_icu_locale_code}.sh" 2>&1
                    
            if [ -f "$PREFIX/bin/andistro_files/l10n_${system_icu_locale_code}.sh" ] && [ -f "$PREFIX/bin/andistro_files/l10n_${system_icu_locale_code}.check" ]; then
                if ! cmp -s "${extralink}/config/locale/l10n_${system_icu_locale_code}.sh" "${extralink}/config/locale/l10n_${system_icu_locale_code}.check"; then
                    rm "${extralink}/config/locale/l10n_${system_icu_locale_code}.sh"
                    mv "${extralink}/config/locale/l10n_${system_icu_locale_code}.check" "${extralink}/config/locale/l10n_${system_icu_locale_code}.sh"
                    chmod +x "${extralink}/config/locale/l10n_${system_icu_locale_code}.sh"
                else
                    rm "${extralink}/config/locale/l10n_${system_icu_locale_code}.check"
                fi
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            #20 Verifica se o andistro está em $HOME
            if [ -f "$HOME/andistro" ]; then
                mv "$HOME/andistro" "$PREFIX/bin/andistro"
                rm -rf "$HOME/andistro"
            fi
            chmod +x "$PREFIX/bin/andistro"
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1

            # 21 Verifica e atualiza o andistro
            curl -s -o "$HOME/andistro.check" "${extralink}/andistro" 2>&1

            if [ -f "$PREFIX/bin/andistro" ] && [ -f "$HOME/andistro.check" ]; then
                if ! cmp -s "$PREFIX/bin/andistro" "$HOME/andistro.check"; then
                    rm "$PREFIX/bin/andistro"
                    mv "$HOME/andistro.check" "$PREFIX/bin/andistro"
                    chmod +x "$PREFIX/bin/andistro"
                else
                    rm "$HOME/andistro.check"
                fi
            fi
            ((current_step++))
            update_progress "$current_step" "$total_steps"; sleep 0.1
            
            echo  # pular linha no fim
        }

        clear

        chmod +x "$PREFIX/bin/andistro_files/global_var_fun.sh"
        source "$PREFIX/bin/andistro_files/global_var_fun.sh"

        andistro
        exit 1
        ;;

    -i)
        if [ -z "$2" ]; then
            echo "$distro_desc_line_1"
            echo ""
            echo "$distro_desc_line_2"
            echo "$distro_desc_line_3"
            echo " "
            echo "$distro_desc_line_8"
            echo "$distro_desc_line_10"
            echo " "
            echo "$distro_desc_line_13"
            echo "   debian"
            echo "   ubuntu"
            exit 1
        fi

        if [ "$2" == "debian" ]; then
            echo "$distro_wait"
            andistro ${distro_update} 2>&1
            andistro alerta
            show_progress_dialog "wget" "${label_progress}" 1 -O "$HOME/start-distro.sh" "${extralink}/distros/debian.sh"
            clear

        elif [ "$2" == "ubuntu" ]; then
            echo "$distro_wait"
            andistro ${distro_update} 2>&1
            andistro alerta
            show_progress_dialog "wget" "${label_progress}" 1 -O "$HOME/start-distro.sh" "${extralink}/distros/ubuntu.sh"
            clear

        else
            echo "Distribuição não reconhecida: $2"
            exit 1
        fi
        chmod +x $HOME/start-distro.sh
        bash $HOME/start-distro.sh
        rm -rf $HOME/start-distro.sh
        ;;
    -d)
        if [ -z "$2" ]; then
            echo "$distro_desc_line_1"
            echo ""
            echo "$distro_desc_line_4"
            echo "$distro_desc_line_5"
            echo " "
            echo "$distro_desc_line_8"
            echo "$distro_desc_line_11"
            echo " "
            echo "$distro_desc_line_13"
            echo "   debian"
            echo "   ubuntu"
            exit 1
        fi

        if [ "$2" == "debian" ]; then
            echo "$distro_wait"
            andistro ${distro_update} 2>&1
            rm -rf $HOME/debian-stable
            rm -rf $HOME/debian-binds
            rm -rf $HOME/start-debian.sh
            rm -rf $HOME/start-distro.sh
            rm -rf $HOME/l10n*.sh
            rm -rf $HOME/global_var_fun.sh
            rm -rf $HOME/storage
            rm -rf $HOME/debian-stable
            rm -rf $HOME/debian-bookworm
            rm -rf $HOME/debian-bullseye
            rm -rf $PREFIX/bin/start-debian
            rm -rf /data/data/com.termux/files/usr/var/run/dbus/pid 
            rm -rf system_bus_socket
            echo "Desinstalação concluída!"
            clear

        elif [ "$2" == "ubuntu" ]; then
            echo "$distro_wait"
            andistro ${distro_update} 2>&1
            rm -rf $HOME/ubuntu-noble
            rm -rf $HOME/ubuntu-noble.tar.xz
            rm -rf $HOME/ubuntu-fs
            rm -rf $HOME/ubuntu-binds
            rm -rf $HOME/start-ubuntu.sh
            rm -rf $PREFIX/bin/andistro_files/start-ubuntu
            rm -rf $HOME/start-distro.sh
            rm -rf $HOME/l10n*.sh
            rm -rf $HOME/global_var_fun.sh
            rm -rf $PREFIX/bin/start-ubuntu
            rm -rf /data/data/com.termux/files/usr/var/run/dbus/pid 
            rm -rf system_bus_socket
            echo "Desinstalação concluída!"
            clear

        else
            echo "Distribuição não reconhecida: $2"
            exit 1
        fi
        ;;
    -s)
        if [ -z "$2" ]; then
            echo "$distro_desc_line_1"
            echo ""
            echo "$distro_desc_line_6"
            echo "$distro_desc_line_7"
            echo " "
            echo "$distro_desc_line_8"
            echo "$distro_desc_line_12"
            echo " "
            echo "$distro_desc_line_13"
            echo "   debian"
            echo "   ubuntu"
            exit 1
        fi

        if [ "$2" == "debian" ]; then
            echo "$distro_wait"
            start-debian
            clear

        elif [ "$2" == "ubuntu" ]; then
            echo "$distro_wait"
            start-ubuntu
            clear

        else
            echo "Distribuição não reconhecida: $2"
            exit 1
        fi
        ;;

        terminal)
            echo "$distro_desc_line_1"
            echo ""
            echo "$distro_desc_line_2"
            echo "$distro_desc_line_3"
            echo " "
            echo "$distro_desc_line_4"
            echo "$distro_desc_line_5"
            echo " "
            echo "$distro_desc_line_6"
            echo "$distro_desc_line_7"
            echo " "
            echo "$distro_desc_line_8"
            echo "$distro_desc_line_9"
            echo "$distro_desc_line_10"
            echo "$distro_desc_line_11"
            echo "$distro_desc_line_12"
            echo " "
            echo "$distro_desc_line_13"
            echo "   debian"
            echo "   ubuntu"
        ;;

        alerta)
            {
                for i in {1..50}; do
                    sleep 0.1
                    echo $((i * 2))
                done
            } | dialog --gauge "${label_distro_alert_timezone_desc} \n$label_distro_alert_timezone_detected $system_timezone\n\n$label_sleep_in_5s" 10 60 0
        ;;

    *)
        echo "$distro_command_not_found $1"
        andistro terminal
        exit 1
        ;;
esac
