show_progress_dialog() {
    # show_progress_dialog [type] [title] [steps/count/pid] [commands...]
    # Types supported:
    #   steps         - Multiple labeled commands
    #   apt-labeled   - apt/apt-get with labels
    #   wget          - Simple download
    #   wget-labeled  - Multiple labeled downloads
    #   pid           - Background process (long-running)
    #   extract       - Extract .zip, .tar, .tar.gz, .xz
    local mode="$1"
    shift

    case "$mode" in
        steps-one-label)
            # Ex: show_progress_dialog steps-one "${label_etapa}" total_comandos \
            #     'comando1' 'comando2' 'comando3'
            local label="$1"
            local total="$2"
            shift 2

            {
                local count=0
                local percent=0
                for cmd in "$@"; do
                    echo "XXX"
                    percent=$(( count * 100 / total ))
                    echo "$percent"
                    echo "$label"
                    echo "XXX"
                    bash -c "$cmd" &>/dev/null
                    count=$((count + 1))
                done

                echo "XXX"
                echo "100"
                echo "${label_completed}"
                echo "XXX"
                sleep 1  # <–– aqui o label final aparece por pelo menos 1s
            } | dialog --gauge "$label" 10 70 0
        ;;

        steps-multi-label)
            # Ex: show_progress_dialog steps 2 \
            #     "${label_step1}" 'comando1' \
            #     "${label_step2}" 'comando2'

            local steps="$1"
            local timestamp=$(date +'%d%m%Y-%H%M%S')
            shift
            {
                local percent step=0
                while [ "$#" -gt 1 ]; do
                    local lbl="$1"
                    local cmd="$2"
                    echo "XXX"
                    percent=$(( step * 100 / steps ))
                    echo "$percent"
                    echo "$lbl"
                    echo "XXX"
                    bash -c "$cmd"  >> "/sdcard/termux/andistro/logs/steps-multi-label_${timestamp}.txt" 2>&1
                    step=$((step + 1))
                    shift 2
                done
                echo "XXX"
                echo "100"
                echo "${label_completed}"
                echo "XXX"
                sleep 1  # <–– aqui o label final aparece por pelo menos 1s
            } | dialog --gauge "$title_progress" 10 70 0
        ;;

        wget)
            # Ex: show_progress_dialog wget "${label}" -O arquivo URL
            # Ex: show_progress_dialog wget "${label_download}" \
            #     -O "$HOME/arquivo.tar.xz" "${url_do_arquivo}"

            local label="$1"
            shift
            {
                wget "$@" &>/dev/null &
                local pid=$!
                local percent=0
                while kill -0 "$pid" 2>/dev/null; do
                    echo "XXX"
                    echo "$percent"
                    echo "$label"
                    echo "XXX"
                    percent=$(( percent < 95 ? percent + 1 : 95 ))
                    sleep 0.3
                done
                echo "XXX"
                echo "100"
                echo "${label_completed}"
                echo "XXX"
            } | dialog --gauge "$label" 10 70 0
        ;;

        wget-labeled)
            local label="$1"
            local total="$2"
            shift 2

            {
                local count=0

                while [ $# -gt 0 ]; do
                    local current_label="$1"
                    shift
                    local wget_opts=()
                    while [[ $# -gt 1 && "$1" == -* ]]; do
                        wget_opts+=("$1")
                        shift
                        wget_opts+=("$1")
                        shift
                    done
                    local url="$1"
                    shift

                    echo -e "XXX\n$((count * 100 / total))\n${current_label}\nXXX"

                    wget --tries=20 --progress=bar:force:noscroll "${wget_opts[@]}" "$url" 2>&1 |
                    stdbuf -oL grep --line-buffered "%" |
                    stdbuf -oL sed -u -e "s,\.,,g" | awk -v count="$count" -v total="$total" -v label="$current_label" '
                        {
                            match($0, /([0-9]{1,3})%/, arr);
                            if (arr[1] != "") {
                                percent = int((count * 100 + arr[1]) / total);
                                print "XXX\n" percent "\n" label "\nXXX";
                            }
                        }'

                    ((count++))
                done

                echo -e "XXX\n100\n${label_completed}\nXXX"
                echo -e "XXX\n100\nXXX"
            } | dialog --gauge "$label" 10 70 0
        ;;
        
        extract)
            local label="$1"
            local file="$2"
            local dest="$3"

            # Se não passar destino, cria pasta com o mesmo nome do arquivo (sem extensão)
            if [ -z "$dest" ]; then
                case "$file" in
                    *.tar.xz) dest="$(dirname "$file")/$(basename "$file" .tar.xz)" ;;
                    *.tar.gz) dest="$(dirname "$file")/$(basename "$file" .tar.gz)" ;;
                    *.tgz)    dest="$(dirname "$file")/$(basename "$file" .tgz)" ;;
                    *.tar.bz2) dest="$(dirname "$file")/$(basename "$file" .tar.bz2)" ;;
                    *.tar)    dest="$(dirname "$file")/$(basename "$file" .tar)" ;;
                    *.zip)    dest="$(dirname "$file")/$(basename "$file" .zip)" ;;
                    *)        dest="$(dirname "$file")" ;; # fallback
                esac
            fi

            # Verifica se o arquivo existe
            if [ ! -f "$file" ]; then
                dialog --title "Erro" --msgbox "Arquivo não encontrado: $file" 10 50
                return 1
            fi

            mkdir -p "$dest"

            case "$file" in
                *.tar.xz) cmd=(tar --strip-components=1 -xJf "$file" -C "$dest") ;;
                *.tar.gz|*.tgz) cmd=(tar --strip-components=1 -xzf "$file" -C "$dest") ;;
                *.tar.bz2) cmd=(tar --strip-components=1 -xjf "$file" -C "$dest") ;;
                *.tar) cmd=(tar --strip-components=1 -xf "$file" -C "$dest") ;;
                *.zip) cmd=(unzip -o "$file" -d "$dest") ;;
                *.xz) cmd=(xz -d "$file") ;;
                *.gz) cmd=(gunzip "$file") ;;
                *)
                    dialog --title "Erro" --msgbox "Formato de arquivo não suportado: $file" 10 50
                    return 1
                ;;
            esac

            set +m
            (
                "${cmd[@]}" >/dev/null 2>&1
            ) & disown
            pid=$!

            {
                i=0
                while kill -0 "$pid" 2>/dev/null; do
                    echo $i
                    sleep 0.2
                    i=$((i + 2))
                    [ $i -ge 95 ] && i=95
                done
                echo 100
                set -m
            } | dialog --gauge "$label" 10 70 0
        ;;


        check-packages)
            # Exemplo de uso:
            # show_progress_dialog check-packages "Verificando" pacote1 pacote2 ...

            local title="$1"
            shift
            local packages=("$@")
            local total="${#packages[@]}"
            local timestamp=$(date +'%d%m%Y-%H%M%S')
            local log_file="/sdcard/termux/andistro/logs/check_packages_${timestamp}.txt"
            local pkg_manager=$(detect_package_manager)
            : > "$log_file"

            {
                for i in "${!packages[@]}"; do
                    local pkg="${packages[$i]}"
                    local index=$(printf "%02d" $((i + 1)))

                    case "$pkg_manager" in
                        apt)
                            if dpkg -s "$pkg" &>/dev/null; then
                                echo "$index [✓] $pkg está instalado." >> "$log_file"
                            else
                                echo "$index [✗] $pkg NÃO está instalado." >> "$log_file"
                            fi
                            ;;
                        apk)
                            if apk info -e "$pkg" &>/dev/null; then
                                echo "$index [✓] $pkg está instalado." >> "$log_file"
                            else
                                echo "$index [✗] $pkg NÃO está instalado." >> "$log_file"
                            fi
                            ;;
                        *)
                            echo "$index [?] Não foi possível verificar $pkg (gerenciador desconhecido)." >> "$log_file"
                            ;;
                    esac

                    # Atualiza porcentagem de progresso
                    percent=$(( (i + 1) * 100 / total ))
                    echo "$percent"
                    sleep 0.2
                done
            } | dialog --title "$title" --gauge "Verificando pacotes..." 10 60 0

            # Exibe resultado final com scroll, sem botão OK
            dialog --title "Resultado da verificação" --textbox "$log_file" 25 80
            ;;

        *)
            echo "Modo desconhecido para show_progress_dialog: $mode" >&2
            return 1
        ;;
    esac
}